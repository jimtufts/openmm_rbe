# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gridforceplugin')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gridforceplugin')
    _gridforceplugin = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gridforceplugin', [dirname(__file__)])
        except ImportError:
            import _gridforceplugin
            return _gridforceplugin
        try:
            _mod = imp.load_module('_gridforceplugin', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gridforceplugin = swig_import_helper()
    del swig_import_helper
else:
    import _gridforceplugin
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import openmm
class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _gridforceplugin.ios_base_erase_event
    imbue_event = _gridforceplugin.ios_base_imbue_event
    copyfmt_event = _gridforceplugin.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _gridforceplugin.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _gridforceplugin.ios_base_flags(self, *args)

    def setf(self, *args):
        return _gridforceplugin.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _gridforceplugin.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _gridforceplugin.ios_base_precision(self, *args)

    def width(self, *args):
        return _gridforceplugin.ios_base_width(self, *args)
    if _newclass:
        sync_with_stdio = staticmethod(_gridforceplugin.ios_base_sync_with_stdio)
    else:
        sync_with_stdio = _gridforceplugin.ios_base_sync_with_stdio

    def imbue(self, __loc):
        return _gridforceplugin.ios_base_imbue(self, __loc)

    def getloc(self):
        return _gridforceplugin.ios_base_getloc(self)
    if _newclass:
        xalloc = staticmethod(_gridforceplugin.ios_base_xalloc)
    else:
        xalloc = _gridforceplugin.ios_base_xalloc

    def iword(self, __ix):
        return _gridforceplugin.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _gridforceplugin.ios_base_pword(self, __ix)
    __swig_destroy__ = _gridforceplugin.delete_ios_base
    __del__ = lambda self: None
ios_base_swigregister = _gridforceplugin.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _gridforceplugin.cvar
ios_base.boolalpha = _gridforceplugin.cvar.ios_base_boolalpha
ios_base.dec = _gridforceplugin.cvar.ios_base_dec
ios_base.fixed = _gridforceplugin.cvar.ios_base_fixed
ios_base.hex = _gridforceplugin.cvar.ios_base_hex
ios_base.internal = _gridforceplugin.cvar.ios_base_internal
ios_base.left = _gridforceplugin.cvar.ios_base_left
ios_base.oct = _gridforceplugin.cvar.ios_base_oct
ios_base.right = _gridforceplugin.cvar.ios_base_right
ios_base.scientific = _gridforceplugin.cvar.ios_base_scientific
ios_base.showbase = _gridforceplugin.cvar.ios_base_showbase
ios_base.showpoint = _gridforceplugin.cvar.ios_base_showpoint
ios_base.showpos = _gridforceplugin.cvar.ios_base_showpos
ios_base.skipws = _gridforceplugin.cvar.ios_base_skipws
ios_base.unitbuf = _gridforceplugin.cvar.ios_base_unitbuf
ios_base.uppercase = _gridforceplugin.cvar.ios_base_uppercase
ios_base.adjustfield = _gridforceplugin.cvar.ios_base_adjustfield
ios_base.basefield = _gridforceplugin.cvar.ios_base_basefield
ios_base.floatfield = _gridforceplugin.cvar.ios_base_floatfield
ios_base.badbit = _gridforceplugin.cvar.ios_base_badbit
ios_base.eofbit = _gridforceplugin.cvar.ios_base_eofbit
ios_base.failbit = _gridforceplugin.cvar.ios_base_failbit
ios_base.goodbit = _gridforceplugin.cvar.ios_base_goodbit
ios_base.app = _gridforceplugin.cvar.ios_base_app
ios_base.ate = _gridforceplugin.cvar.ios_base_ate
ios_base.binary = _gridforceplugin.cvar.ios_base_binary
ios_base.ios_base_in = _gridforceplugin.cvar.ios_base_ios_base_in
ios_base.out = _gridforceplugin.cvar.ios_base_out
ios_base.trunc = _gridforceplugin.cvar.ios_base_trunc
ios_base.beg = _gridforceplugin.cvar.ios_base_beg
ios_base.cur = _gridforceplugin.cvar.ios_base_cur
ios_base.end = _gridforceplugin.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
    return _gridforceplugin.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _gridforceplugin.ios_base_sync_with_stdio

def ios_base_xalloc():
    return _gridforceplugin.ios_base_xalloc()
ios_base_xalloc = _gridforceplugin.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr

    def rdstate(self):
        return _gridforceplugin.ios_rdstate(self)

    def clear(self, *args):
        return _gridforceplugin.ios_clear(self, *args)

    def setstate(self, __state):
        return _gridforceplugin.ios_setstate(self, __state)

    def good(self):
        return _gridforceplugin.ios_good(self)

    def eof(self):
        return _gridforceplugin.ios_eof(self)

    def fail(self):
        return _gridforceplugin.ios_fail(self)

    def bad(self):
        return _gridforceplugin.ios_bad(self)

    def exceptions(self, *args):
        return _gridforceplugin.ios_exceptions(self, *args)

    def __init__(self, __sb):
        this = _gridforceplugin.new_ios(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gridforceplugin.delete_ios
    __del__ = lambda self: None

    def tie(self, *args):
        return _gridforceplugin.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _gridforceplugin.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _gridforceplugin.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _gridforceplugin.ios_fill(self, *args)

    def imbue(self, __loc):
        return _gridforceplugin.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _gridforceplugin.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _gridforceplugin.ios_widen(self, __c)
ios_swigregister = _gridforceplugin.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _gridforceplugin.new_ostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gridforceplugin.delete_ostream
    __del__ = lambda self: None

    def __lshift__(self, *args):
        return _gridforceplugin.ostream___lshift__(self, *args)

    def put(self, __c):
        return _gridforceplugin.ostream_put(self, __c)

    def write(self, __s, __n):
        return _gridforceplugin.ostream_write(self, __s, __n)

    def flush(self):
        return _gridforceplugin.ostream_flush(self)

    def tellp(self):
        return _gridforceplugin.ostream_tellp(self)

    def seekp(self, *args):
        return _gridforceplugin.ostream_seekp(self, *args)
ostream_swigregister = _gridforceplugin.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _gridforceplugin.new_istream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gridforceplugin.delete_istream
    __del__ = lambda self: None

    def __rshift__(self, *args):
        return _gridforceplugin.istream___rshift__(self, *args)

    def gcount(self):
        return _gridforceplugin.istream_gcount(self)

    def get(self, *args):
        return _gridforceplugin.istream_get(self, *args)

    def getline(self, *args):
        return _gridforceplugin.istream_getline(self, *args)

    def ignore(self, *args):
        return _gridforceplugin.istream_ignore(self, *args)

    def peek(self):
        return _gridforceplugin.istream_peek(self)

    def read(self, __s, __n):
        return _gridforceplugin.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _gridforceplugin.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _gridforceplugin.istream_putback(self, __c)

    def unget(self):
        return _gridforceplugin.istream_unget(self)

    def sync(self):
        return _gridforceplugin.istream_sync(self)

    def tellg(self):
        return _gridforceplugin.istream_tellg(self)

    def seekg(self, *args):
        return _gridforceplugin.istream_seekg(self, *args)
istream_swigregister = _gridforceplugin.istream_swigregister
istream_swigregister(istream)

class iostream(istream, ostream):
    __swig_setmethods__ = {}
    for _s in [istream, ostream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream, ostream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr

    def __init__(self, __sb):
        this = _gridforceplugin.new_iostream(__sb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gridforceplugin.delete_iostream
    __del__ = lambda self: None
iostream_swigregister = _gridforceplugin.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _gridforceplugin.endl_cb_ptr

def endl(arg1):
    return _gridforceplugin.endl(arg1)
endl = _gridforceplugin.endl
ends_cb_ptr = _gridforceplugin.ends_cb_ptr

def ends(arg1):
    return _gridforceplugin.ends(arg1)
ends = _gridforceplugin.ends
flush_cb_ptr = _gridforceplugin.flush_cb_ptr

def flush(arg1):
    return _gridforceplugin.flush(arg1)
flush = _gridforceplugin.flush
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gridforceplugin.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _gridforceplugin.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gridforceplugin.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gridforceplugin.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gridforceplugin.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gridforceplugin.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gridforceplugin.SwigPyIterator_copy(self)

    def next(self):
        return _gridforceplugin.SwigPyIterator_next(self)

    def __next__(self):
        return _gridforceplugin.SwigPyIterator___next__(self)

    def previous(self):
        return _gridforceplugin.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gridforceplugin.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gridforceplugin.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gridforceplugin.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gridforceplugin.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gridforceplugin.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gridforceplugin.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gridforceplugin.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gridforceplugin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class pairii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairii, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _gridforceplugin.new_pairii(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _gridforceplugin.pairii_first_set
    __swig_getmethods__["first"] = _gridforceplugin.pairii_first_get
    if _newclass:
        first = _swig_property(_gridforceplugin.pairii_first_get, _gridforceplugin.pairii_first_set)
    __swig_setmethods__["second"] = _gridforceplugin.pairii_second_set
    __swig_getmethods__["second"] = _gridforceplugin.pairii_second_get
    if _newclass:
        second = _swig_property(_gridforceplugin.pairii_second_get, _gridforceplugin.pairii_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _gridforceplugin.delete_pairii
    __del__ = lambda self: None
pairii_swigregister = _gridforceplugin.pairii_swigregister
pairii_swigregister(pairii)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.vectord___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.vectord___bool__(self)

    def __len__(self):
        return _gridforceplugin.vectord___len__(self)

    def __getslice__(self, i, j):
        return _gridforceplugin.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridforceplugin.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridforceplugin.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridforceplugin.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridforceplugin.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridforceplugin.vectord___setitem__(self, *args)

    def pop(self):
        return _gridforceplugin.vectord_pop(self)

    def append(self, x):
        return _gridforceplugin.vectord_append(self, x)

    def empty(self):
        return _gridforceplugin.vectord_empty(self)

    def size(self):
        return _gridforceplugin.vectord_size(self)

    def swap(self, v):
        return _gridforceplugin.vectord_swap(self, v)

    def begin(self):
        return _gridforceplugin.vectord_begin(self)

    def end(self):
        return _gridforceplugin.vectord_end(self)

    def rbegin(self):
        return _gridforceplugin.vectord_rbegin(self)

    def rend(self):
        return _gridforceplugin.vectord_rend(self)

    def clear(self):
        return _gridforceplugin.vectord_clear(self)

    def get_allocator(self):
        return _gridforceplugin.vectord_get_allocator(self)

    def pop_back(self):
        return _gridforceplugin.vectord_pop_back(self)

    def erase(self, *args):
        return _gridforceplugin.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _gridforceplugin.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridforceplugin.vectord_push_back(self, x)

    def front(self):
        return _gridforceplugin.vectord_front(self)

    def back(self):
        return _gridforceplugin.vectord_back(self)

    def assign(self, n, x):
        return _gridforceplugin.vectord_assign(self, n, x)

    def resize(self, *args):
        return _gridforceplugin.vectord_resize(self, *args)

    def insert(self, *args):
        return _gridforceplugin.vectord_insert(self, *args)

    def reserve(self, n):
        return _gridforceplugin.vectord_reserve(self, n)

    def capacity(self):
        return _gridforceplugin.vectord_capacity(self)
    __swig_destroy__ = _gridforceplugin.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _gridforceplugin.vectord_swigregister
vectord_swigregister(vectord)

class vectorddd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorddd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorddd, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.vectorddd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.vectorddd___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.vectorddd___bool__(self)

    def __len__(self):
        return _gridforceplugin.vectorddd___len__(self)

    def __getslice__(self, i, j):
        return _gridforceplugin.vectorddd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridforceplugin.vectorddd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridforceplugin.vectorddd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridforceplugin.vectorddd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridforceplugin.vectorddd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridforceplugin.vectorddd___setitem__(self, *args)

    def pop(self):
        return _gridforceplugin.vectorddd_pop(self)

    def append(self, x):
        return _gridforceplugin.vectorddd_append(self, x)

    def empty(self):
        return _gridforceplugin.vectorddd_empty(self)

    def size(self):
        return _gridforceplugin.vectorddd_size(self)

    def swap(self, v):
        return _gridforceplugin.vectorddd_swap(self, v)

    def begin(self):
        return _gridforceplugin.vectorddd_begin(self)

    def end(self):
        return _gridforceplugin.vectorddd_end(self)

    def rbegin(self):
        return _gridforceplugin.vectorddd_rbegin(self)

    def rend(self):
        return _gridforceplugin.vectorddd_rend(self)

    def clear(self):
        return _gridforceplugin.vectorddd_clear(self)

    def get_allocator(self):
        return _gridforceplugin.vectorddd_get_allocator(self)

    def pop_back(self):
        return _gridforceplugin.vectorddd_pop_back(self)

    def erase(self, *args):
        return _gridforceplugin.vectorddd_erase(self, *args)

    def __init__(self, *args):
        this = _gridforceplugin.new_vectorddd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridforceplugin.vectorddd_push_back(self, x)

    def front(self):
        return _gridforceplugin.vectorddd_front(self)

    def back(self):
        return _gridforceplugin.vectorddd_back(self)

    def assign(self, n, x):
        return _gridforceplugin.vectorddd_assign(self, n, x)

    def resize(self, *args):
        return _gridforceplugin.vectorddd_resize(self, *args)

    def insert(self, *args):
        return _gridforceplugin.vectorddd_insert(self, *args)

    def reserve(self, n):
        return _gridforceplugin.vectorddd_reserve(self, n)

    def capacity(self):
        return _gridforceplugin.vectorddd_capacity(self)
    __swig_destroy__ = _gridforceplugin.delete_vectorddd
    __del__ = lambda self: None
vectorddd_swigregister = _gridforceplugin.vectorddd_swigregister
vectorddd_swigregister(vectorddd)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.vectori___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.vectori___bool__(self)

    def __len__(self):
        return _gridforceplugin.vectori___len__(self)

    def __getslice__(self, i, j):
        return _gridforceplugin.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridforceplugin.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridforceplugin.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridforceplugin.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridforceplugin.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridforceplugin.vectori___setitem__(self, *args)

    def pop(self):
        return _gridforceplugin.vectori_pop(self)

    def append(self, x):
        return _gridforceplugin.vectori_append(self, x)

    def empty(self):
        return _gridforceplugin.vectori_empty(self)

    def size(self):
        return _gridforceplugin.vectori_size(self)

    def swap(self, v):
        return _gridforceplugin.vectori_swap(self, v)

    def begin(self):
        return _gridforceplugin.vectori_begin(self)

    def end(self):
        return _gridforceplugin.vectori_end(self)

    def rbegin(self):
        return _gridforceplugin.vectori_rbegin(self)

    def rend(self):
        return _gridforceplugin.vectori_rend(self)

    def clear(self):
        return _gridforceplugin.vectori_clear(self)

    def get_allocator(self):
        return _gridforceplugin.vectori_get_allocator(self)

    def pop_back(self):
        return _gridforceplugin.vectori_pop_back(self)

    def erase(self, *args):
        return _gridforceplugin.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _gridforceplugin.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridforceplugin.vectori_push_back(self, x)

    def front(self):
        return _gridforceplugin.vectori_front(self)

    def back(self):
        return _gridforceplugin.vectori_back(self)

    def assign(self, n, x):
        return _gridforceplugin.vectori_assign(self, n, x)

    def resize(self, *args):
        return _gridforceplugin.vectori_resize(self, *args)

    def insert(self, *args):
        return _gridforceplugin.vectori_insert(self, *args)

    def reserve(self, n):
        return _gridforceplugin.vectori_reserve(self, n)

    def capacity(self):
        return _gridforceplugin.vectori_capacity(self)
    __swig_destroy__ = _gridforceplugin.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _gridforceplugin.vectori_swigregister
vectori_swigregister(vectori)

class vectorii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorii, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.vectorii_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.vectorii___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.vectorii___bool__(self)

    def __len__(self):
        return _gridforceplugin.vectorii___len__(self)

    def __getslice__(self, i, j):
        return _gridforceplugin.vectorii___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridforceplugin.vectorii___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridforceplugin.vectorii___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridforceplugin.vectorii___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridforceplugin.vectorii___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridforceplugin.vectorii___setitem__(self, *args)

    def pop(self):
        return _gridforceplugin.vectorii_pop(self)

    def append(self, x):
        return _gridforceplugin.vectorii_append(self, x)

    def empty(self):
        return _gridforceplugin.vectorii_empty(self)

    def size(self):
        return _gridforceplugin.vectorii_size(self)

    def swap(self, v):
        return _gridforceplugin.vectorii_swap(self, v)

    def begin(self):
        return _gridforceplugin.vectorii_begin(self)

    def end(self):
        return _gridforceplugin.vectorii_end(self)

    def rbegin(self):
        return _gridforceplugin.vectorii_rbegin(self)

    def rend(self):
        return _gridforceplugin.vectorii_rend(self)

    def clear(self):
        return _gridforceplugin.vectorii_clear(self)

    def get_allocator(self):
        return _gridforceplugin.vectorii_get_allocator(self)

    def pop_back(self):
        return _gridforceplugin.vectorii_pop_back(self)

    def erase(self, *args):
        return _gridforceplugin.vectorii_erase(self, *args)

    def __init__(self, *args):
        this = _gridforceplugin.new_vectorii(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridforceplugin.vectorii_push_back(self, x)

    def front(self):
        return _gridforceplugin.vectorii_front(self)

    def back(self):
        return _gridforceplugin.vectorii_back(self)

    def assign(self, n, x):
        return _gridforceplugin.vectorii_assign(self, n, x)

    def resize(self, *args):
        return _gridforceplugin.vectorii_resize(self, *args)

    def insert(self, *args):
        return _gridforceplugin.vectorii_insert(self, *args)

    def reserve(self, n):
        return _gridforceplugin.vectorii_reserve(self, n)

    def capacity(self):
        return _gridforceplugin.vectorii_capacity(self)
    __swig_destroy__ = _gridforceplugin.delete_vectorii
    __del__ = lambda self: None
vectorii_swigregister = _gridforceplugin.vectorii_swigregister
vectorii_swigregister(vectorii)

class vectorpairii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorpairii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorpairii, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.vectorpairii_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.vectorpairii___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.vectorpairii___bool__(self)

    def __len__(self):
        return _gridforceplugin.vectorpairii___len__(self)

    def __getslice__(self, i, j):
        return _gridforceplugin.vectorpairii___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridforceplugin.vectorpairii___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridforceplugin.vectorpairii___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridforceplugin.vectorpairii___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridforceplugin.vectorpairii___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridforceplugin.vectorpairii___setitem__(self, *args)

    def pop(self):
        return _gridforceplugin.vectorpairii_pop(self)

    def append(self, x):
        return _gridforceplugin.vectorpairii_append(self, x)

    def empty(self):
        return _gridforceplugin.vectorpairii_empty(self)

    def size(self):
        return _gridforceplugin.vectorpairii_size(self)

    def swap(self, v):
        return _gridforceplugin.vectorpairii_swap(self, v)

    def begin(self):
        return _gridforceplugin.vectorpairii_begin(self)

    def end(self):
        return _gridforceplugin.vectorpairii_end(self)

    def rbegin(self):
        return _gridforceplugin.vectorpairii_rbegin(self)

    def rend(self):
        return _gridforceplugin.vectorpairii_rend(self)

    def clear(self):
        return _gridforceplugin.vectorpairii_clear(self)

    def get_allocator(self):
        return _gridforceplugin.vectorpairii_get_allocator(self)

    def pop_back(self):
        return _gridforceplugin.vectorpairii_pop_back(self)

    def erase(self, *args):
        return _gridforceplugin.vectorpairii_erase(self, *args)

    def __init__(self, *args):
        this = _gridforceplugin.new_vectorpairii(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridforceplugin.vectorpairii_push_back(self, x)

    def front(self):
        return _gridforceplugin.vectorpairii_front(self)

    def back(self):
        return _gridforceplugin.vectorpairii_back(self)

    def assign(self, n, x):
        return _gridforceplugin.vectorpairii_assign(self, n, x)

    def resize(self, *args):
        return _gridforceplugin.vectorpairii_resize(self, *args)

    def insert(self, *args):
        return _gridforceplugin.vectorpairii_insert(self, *args)

    def reserve(self, n):
        return _gridforceplugin.vectorpairii_reserve(self, n)

    def capacity(self):
        return _gridforceplugin.vectorpairii_capacity(self)
    __swig_destroy__ = _gridforceplugin.delete_vectorpairii
    __del__ = lambda self: None
vectorpairii_swigregister = _gridforceplugin.vectorpairii_swigregister
vectorpairii_swigregister(vectorpairii)

class vectorstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorstring, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.vectorstring_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.vectorstring___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.vectorstring___bool__(self)

    def __len__(self):
        return _gridforceplugin.vectorstring___len__(self)

    def __getslice__(self, i, j):
        return _gridforceplugin.vectorstring___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gridforceplugin.vectorstring___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gridforceplugin.vectorstring___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gridforceplugin.vectorstring___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gridforceplugin.vectorstring___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gridforceplugin.vectorstring___setitem__(self, *args)

    def pop(self):
        return _gridforceplugin.vectorstring_pop(self)

    def append(self, x):
        return _gridforceplugin.vectorstring_append(self, x)

    def empty(self):
        return _gridforceplugin.vectorstring_empty(self)

    def size(self):
        return _gridforceplugin.vectorstring_size(self)

    def swap(self, v):
        return _gridforceplugin.vectorstring_swap(self, v)

    def begin(self):
        return _gridforceplugin.vectorstring_begin(self)

    def end(self):
        return _gridforceplugin.vectorstring_end(self)

    def rbegin(self):
        return _gridforceplugin.vectorstring_rbegin(self)

    def rend(self):
        return _gridforceplugin.vectorstring_rend(self)

    def clear(self):
        return _gridforceplugin.vectorstring_clear(self)

    def get_allocator(self):
        return _gridforceplugin.vectorstring_get_allocator(self)

    def pop_back(self):
        return _gridforceplugin.vectorstring_pop_back(self)

    def erase(self, *args):
        return _gridforceplugin.vectorstring_erase(self, *args)

    def __init__(self, *args):
        this = _gridforceplugin.new_vectorstring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _gridforceplugin.vectorstring_push_back(self, x)

    def front(self):
        return _gridforceplugin.vectorstring_front(self)

    def back(self):
        return _gridforceplugin.vectorstring_back(self)

    def assign(self, n, x):
        return _gridforceplugin.vectorstring_assign(self, n, x)

    def resize(self, *args):
        return _gridforceplugin.vectorstring_resize(self, *args)

    def insert(self, *args):
        return _gridforceplugin.vectorstring_insert(self, *args)

    def reserve(self, n):
        return _gridforceplugin.vectorstring_reserve(self, n)

    def capacity(self):
        return _gridforceplugin.vectorstring_capacity(self)
    __swig_destroy__ = _gridforceplugin.delete_vectorstring
    __del__ = lambda self: None
vectorstring_swigregister = _gridforceplugin.vectorstring_swigregister
vectorstring_swigregister(vectorstring)

class mapstringstring(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapstringstring, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapstringstring, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.mapstringstring_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.mapstringstring___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.mapstringstring___bool__(self)

    def __len__(self):
        return _gridforceplugin.mapstringstring___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gridforceplugin.mapstringstring___getitem__(self, key)

    def __delitem__(self, key):
        return _gridforceplugin.mapstringstring___delitem__(self, key)

    def has_key(self, key):
        return _gridforceplugin.mapstringstring_has_key(self, key)

    def keys(self):
        return _gridforceplugin.mapstringstring_keys(self)

    def values(self):
        return _gridforceplugin.mapstringstring_values(self)

    def items(self):
        return _gridforceplugin.mapstringstring_items(self)

    def __contains__(self, key):
        return _gridforceplugin.mapstringstring___contains__(self, key)

    def key_iterator(self):
        return _gridforceplugin.mapstringstring_key_iterator(self)

    def value_iterator(self):
        return _gridforceplugin.mapstringstring_value_iterator(self)

    def __setitem__(self, *args):
        return _gridforceplugin.mapstringstring___setitem__(self, *args)

    def asdict(self):
        return _gridforceplugin.mapstringstring_asdict(self)

    def __init__(self, *args):
        this = _gridforceplugin.new_mapstringstring(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gridforceplugin.mapstringstring_empty(self)

    def size(self):
        return _gridforceplugin.mapstringstring_size(self)

    def swap(self, v):
        return _gridforceplugin.mapstringstring_swap(self, v)

    def begin(self):
        return _gridforceplugin.mapstringstring_begin(self)

    def end(self):
        return _gridforceplugin.mapstringstring_end(self)

    def rbegin(self):
        return _gridforceplugin.mapstringstring_rbegin(self)

    def rend(self):
        return _gridforceplugin.mapstringstring_rend(self)

    def clear(self):
        return _gridforceplugin.mapstringstring_clear(self)

    def get_allocator(self):
        return _gridforceplugin.mapstringstring_get_allocator(self)

    def count(self, x):
        return _gridforceplugin.mapstringstring_count(self, x)

    def erase(self, *args):
        return _gridforceplugin.mapstringstring_erase(self, *args)

    def find(self, x):
        return _gridforceplugin.mapstringstring_find(self, x)

    def lower_bound(self, x):
        return _gridforceplugin.mapstringstring_lower_bound(self, x)

    def upper_bound(self, x):
        return _gridforceplugin.mapstringstring_upper_bound(self, x)
    __swig_destroy__ = _gridforceplugin.delete_mapstringstring
    __del__ = lambda self: None
mapstringstring_swigregister = _gridforceplugin.mapstringstring_swigregister
mapstringstring_swigregister(mapstringstring)

class mapstringdouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapstringdouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapstringdouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.mapstringdouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.mapstringdouble___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.mapstringdouble___bool__(self)

    def __len__(self):
        return _gridforceplugin.mapstringdouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gridforceplugin.mapstringdouble___getitem__(self, key)

    def __delitem__(self, key):
        return _gridforceplugin.mapstringdouble___delitem__(self, key)

    def has_key(self, key):
        return _gridforceplugin.mapstringdouble_has_key(self, key)

    def keys(self):
        return _gridforceplugin.mapstringdouble_keys(self)

    def values(self):
        return _gridforceplugin.mapstringdouble_values(self)

    def items(self):
        return _gridforceplugin.mapstringdouble_items(self)

    def __contains__(self, key):
        return _gridforceplugin.mapstringdouble___contains__(self, key)

    def key_iterator(self):
        return _gridforceplugin.mapstringdouble_key_iterator(self)

    def value_iterator(self):
        return _gridforceplugin.mapstringdouble_value_iterator(self)

    def __setitem__(self, *args):
        return _gridforceplugin.mapstringdouble___setitem__(self, *args)

    def asdict(self):
        return _gridforceplugin.mapstringdouble_asdict(self)

    def __init__(self, *args):
        this = _gridforceplugin.new_mapstringdouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gridforceplugin.mapstringdouble_empty(self)

    def size(self):
        return _gridforceplugin.mapstringdouble_size(self)

    def swap(self, v):
        return _gridforceplugin.mapstringdouble_swap(self, v)

    def begin(self):
        return _gridforceplugin.mapstringdouble_begin(self)

    def end(self):
        return _gridforceplugin.mapstringdouble_end(self)

    def rbegin(self):
        return _gridforceplugin.mapstringdouble_rbegin(self)

    def rend(self):
        return _gridforceplugin.mapstringdouble_rend(self)

    def clear(self):
        return _gridforceplugin.mapstringdouble_clear(self)

    def get_allocator(self):
        return _gridforceplugin.mapstringdouble_get_allocator(self)

    def count(self, x):
        return _gridforceplugin.mapstringdouble_count(self, x)

    def erase(self, *args):
        return _gridforceplugin.mapstringdouble_erase(self, *args)

    def find(self, x):
        return _gridforceplugin.mapstringdouble_find(self, x)

    def lower_bound(self, x):
        return _gridforceplugin.mapstringdouble_lower_bound(self, x)

    def upper_bound(self, x):
        return _gridforceplugin.mapstringdouble_upper_bound(self, x)
    __swig_destroy__ = _gridforceplugin.delete_mapstringdouble
    __del__ = lambda self: None
mapstringdouble_swigregister = _gridforceplugin.mapstringdouble_swigregister
mapstringdouble_swigregister(mapstringdouble)

class mapii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapii, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.mapii_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.mapii___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.mapii___bool__(self)

    def __len__(self):
        return _gridforceplugin.mapii___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _gridforceplugin.mapii___getitem__(self, key)

    def __delitem__(self, key):
        return _gridforceplugin.mapii___delitem__(self, key)

    def has_key(self, key):
        return _gridforceplugin.mapii_has_key(self, key)

    def keys(self):
        return _gridforceplugin.mapii_keys(self)

    def values(self):
        return _gridforceplugin.mapii_values(self)

    def items(self):
        return _gridforceplugin.mapii_items(self)

    def __contains__(self, key):
        return _gridforceplugin.mapii___contains__(self, key)

    def key_iterator(self):
        return _gridforceplugin.mapii_key_iterator(self)

    def value_iterator(self):
        return _gridforceplugin.mapii_value_iterator(self)

    def __setitem__(self, *args):
        return _gridforceplugin.mapii___setitem__(self, *args)

    def asdict(self):
        return _gridforceplugin.mapii_asdict(self)

    def __init__(self, *args):
        this = _gridforceplugin.new_mapii(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gridforceplugin.mapii_empty(self)

    def size(self):
        return _gridforceplugin.mapii_size(self)

    def swap(self, v):
        return _gridforceplugin.mapii_swap(self, v)

    def begin(self):
        return _gridforceplugin.mapii_begin(self)

    def end(self):
        return _gridforceplugin.mapii_end(self)

    def rbegin(self):
        return _gridforceplugin.mapii_rbegin(self)

    def rend(self):
        return _gridforceplugin.mapii_rend(self)

    def clear(self):
        return _gridforceplugin.mapii_clear(self)

    def get_allocator(self):
        return _gridforceplugin.mapii_get_allocator(self)

    def count(self, x):
        return _gridforceplugin.mapii_count(self, x)

    def erase(self, *args):
        return _gridforceplugin.mapii_erase(self, *args)

    def find(self, x):
        return _gridforceplugin.mapii_find(self, x)

    def lower_bound(self, x):
        return _gridforceplugin.mapii_lower_bound(self, x)

    def upper_bound(self, x):
        return _gridforceplugin.mapii_upper_bound(self, x)
    __swig_destroy__ = _gridforceplugin.delete_mapii
    __del__ = lambda self: None
mapii_swigregister = _gridforceplugin.mapii_swigregister
mapii_swigregister(mapii)

class seti(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seti, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seti, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _gridforceplugin.seti_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gridforceplugin.seti___nonzero__(self)

    def __bool__(self):
        return _gridforceplugin.seti___bool__(self)

    def __len__(self):
        return _gridforceplugin.seti___len__(self)

    def append(self, x):
        return _gridforceplugin.seti_append(self, x)

    def __contains__(self, x):
        return _gridforceplugin.seti___contains__(self, x)

    def __getitem__(self, i):
        return _gridforceplugin.seti___getitem__(self, i)

    def add(self, x):
        return _gridforceplugin.seti_add(self, x)

    def discard(self, x):
        return _gridforceplugin.seti_discard(self, x)

    def __init__(self, *args):
        this = _gridforceplugin.new_seti(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _gridforceplugin.seti_empty(self)

    def size(self):
        return _gridforceplugin.seti_size(self)

    def clear(self):
        return _gridforceplugin.seti_clear(self)

    def swap(self, v):
        return _gridforceplugin.seti_swap(self, v)

    def count(self, x):
        return _gridforceplugin.seti_count(self, x)

    def begin(self):
        return _gridforceplugin.seti_begin(self)

    def end(self):
        return _gridforceplugin.seti_end(self)

    def rbegin(self):
        return _gridforceplugin.seti_rbegin(self)

    def rend(self):
        return _gridforceplugin.seti_rend(self)

    def erase(self, *args):
        return _gridforceplugin.seti_erase(self, *args)

    def find(self, x):
        return _gridforceplugin.seti_find(self, x)

    def lower_bound(self, x):
        return _gridforceplugin.seti_lower_bound(self, x)

    def upper_bound(self, x):
        return _gridforceplugin.seti_upper_bound(self, x)

    def equal_range(self, x):
        return _gridforceplugin.seti_equal_range(self, x)

    def insert(self, __x):
        return _gridforceplugin.seti_insert(self, __x)
    __swig_destroy__ = _gridforceplugin.delete_seti
    __del__ = lambda self: None
seti_swigregister = _gridforceplugin.seti_swigregister
seti_swigregister(seti)

class GridForce(openmm.Force):
    """Proxy of C++ GridForcePlugin::GridForce class."""

    __swig_setmethods__ = {}
    for _s in [openmm.Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridForce, name, value)
    __swig_getmethods__ = {}
    for _s in [openmm.Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridForce, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(GridForcePlugin::GridForce self) -> GridForce"""
        this = _gridforceplugin.new_GridForce()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addGridCounts(self, nx, ny, nz):
        """addGridCounts(GridForce self, int nx, int ny, int nz)"""
        return _gridforceplugin.GridForce_addGridCounts(self, nx, ny, nz)


    def addGridSpacing(self, dx, dy, dz):
        """addGridSpacing(GridForce self, double dx, double dy, double dz)"""
        return _gridforceplugin.GridForce_addGridSpacing(self, dx, dy, dz)


    def addGridValue(self, val):
        """addGridValue(GridForce self, double val)"""
        return _gridforceplugin.GridForce_addGridValue(self, val)


    def addScalingFactor(self, val):
        """addScalingFactor(GridForce self, double val)"""
        return _gridforceplugin.GridForce_addScalingFactor(self, val)


    def getGridParameters(self, counts, spacing, vals, scaling_factors):
        """getGridParameters(GridForce self, std::vector< int,std::allocator< int > > & counts, std::vector< double,std::allocator< double > > & spacing, std::vector< double,std::allocator< double > > & vals, std::vector< double,std::allocator< double > > & scaling_factors)"""
        return _gridforceplugin.GridForce_getGridParameters(self, counts, spacing, vals, scaling_factors)


    def updateParametersInContext(self, context):
        """updateParametersInContext(GridForce self, Context context)"""
        return _gridforceplugin.GridForce_updateParametersInContext(self, context)

    __swig_destroy__ = _gridforceplugin.delete_GridForce
    __del__ = lambda self: None
GridForce_swigregister = _gridforceplugin.GridForce_swigregister
GridForce_swigregister(GridForce)


  # when we import * from the python module, we only want to import the
  # actual classes, and not the swigregistration methods, which have already
  # been called, and are now unneeded by the user code, and only pollute the
  # namespace
__all__ = [k for k in locals().keys() if not (k.endswith('_swigregister') or k.startswith('_'))]

# This file is compatible with both classic and new-style classes.


